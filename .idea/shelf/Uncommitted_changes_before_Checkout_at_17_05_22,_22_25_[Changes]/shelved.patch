Index: src/utility/JsonUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utility;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport model.baratto.Baratto;\nimport model.gerarchia.Categoria;\nimport model.gerarchia.Gerarchia;\nimport model.offerta.Offerta;\nimport model.offerta.StatoOfferta;\nimport model.scambio.Scambio;\nimport model.user.Utente;\n\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class JsonUtil {\n    private final static String directoryGerarchie = \"files/gerarchie/\";\n    private final static String directoryScambi = \"files/scambi/\";\n    private final static String directoryOfferte = \"files/offerte/\";\n    private final static String directoryBaratti = \"files/baratti/\";\n\n    public static void writeGerarchia(Gerarchia gerarchia) {\n        GsonBuilder builder = new GsonBuilder();\n        Gson gson = builder.create();\n        String nomeFile = directoryGerarchie + gerarchia.getNomeRadice() + \".json\";\n        try (\n                FileWriter writer = new FileWriter(nomeFile)\n        ) {\n            writer.write(gson.toJson(gerarchia));\n        } catch (IOException e) {\n            System.out.println(\"Errore nel salvataggio della gerarchia\");\n        }\n    }\n\n    private static List<Path> createListOfFile(String directory) {\n        List<Path> list = null;\n\n        try (Stream<Path> files = Files.list(Paths.get(directory))) {\n            list = files.collect(Collectors.toList());\n        } catch (IOException e) {\n            System.out.println(\"Errore: directory files/gerarchie non presente\");\n        }\n        return list;\n    }\n\n    public static List<Gerarchia> readGerarchie() {\n        List<Gerarchia> gerarchiaList = new ArrayList<>();\n        Gerarchia gerarchia;\n        try {\n            Reader reader;\n            if (JsonUtil.createListOfFile(directoryGerarchie) == null) {\n                return null;\n            }\n            for (Path file : JsonUtil.createListOfFile(directoryGerarchie)) {\n                reader = Files.newBufferedReader(file);\n                Gson gson = new Gson();\n                // convert JSON file to Gerarchia\n                gerarchia = gson.fromJson(reader, Gerarchia.class);\n                gerarchiaList.add(gerarchia);\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Errore apertura file Gerarchie\");\n        }\n        return gerarchiaList;\n    }\n\n    public static boolean checkNomeGerarchiaRipetuto(String nome) {\n        List<Gerarchia> gerarchiaList = JsonUtil.readGerarchie();\n        if (gerarchiaList != null) {\n            for (Gerarchia g : gerarchiaList) {\n                if (g.getNomeRadice().equalsIgnoreCase(nome)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public static Scambio readScambio() {\n        Scambio scambio = null;\n        try {\n            Reader reader;\n            reader = Files.newBufferedReader(Path.of(directoryScambi + \"scambio.json\"));\n            Gson gson = new Gson();\n            // convert JSON file to Gerarchia\n            scambio = gson.fromJson(reader, Scambio.class);\n\n        } catch (\n                IOException ex) {\n            System.out.println(\"Errore apertura file Gerarchie\");\n        }\n        return scambio;\n    }\n\n\n    public static void writeScambio(Scambio scambio) {\n        GsonBuilder builder = new GsonBuilder();\n        Gson gson = builder.create();\n        String nomeFile = directoryScambi + \"scambio.json\";\n        try (\n                FileWriter writer = new FileWriter(nomeFile)\n        ) {\n            writer.write(gson.toJson(scambio));\n        } catch (IOException e) {\n            System.out.println(\"Errore nel salvataggio dello scambio\");\n        }\n    }\n\n    public static void writeOfferta(Offerta offerta) {\n        GsonBuilder builder = new GsonBuilder();\n        Gson gson = builder.create();\n        StringBuilder nomeFile = new StringBuilder();\n        nomeFile.append(directoryOfferte).append(offerta.getTitolo())\n                .append(\"_\").append(offerta.getAutore())\n                .append(\".json\");\n        try (\n                FileWriter writer = new FileWriter(nomeFile.toString())\n        ) {\n            writer.write(gson.toJson(offerta));\n        } catch (IOException e) {\n            System.out.println(\"Errore nel salvataggio dell' offerta\");\n        }\n    }\n\n    public static List<Offerta> readOfferteByCategoria(String nomeCategoria) {\n        List<Offerta> offertaList = new ArrayList<>();\n        Offerta offerta;\n        try {\n            Reader reader;\n            if (JsonUtil.createListOfFile(directoryOfferte) == null) {\n                return null;\n            }\n            for (Path file : JsonUtil.createListOfFile(directoryOfferte)) {\n                reader = Files.newBufferedReader(file);\n                Gson gson = new Gson();\n                // convert JSON file to Gerarchia\n                offerta = gson.fromJson(reader, Offerta.class);\n                if (nomeCategoria.equals(offerta.getCategoriaName()))\n                    offertaList.add(offerta);\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Errore apertura file Offerte\");\n        }\n        return offertaList;\n    }\n\n    public static List<Offerta> readOffertaByAutore(String autore) {\n        List<Offerta> offertaList = new ArrayList<>();\n        Offerta offerta;\n        try {\n            Reader reader;\n            if (JsonUtil.createListOfFile(directoryOfferte) == null) {\n                return null;\n            }\n            for (Path file : JsonUtil.createListOfFile(directoryOfferte)) {\n                reader = Files.newBufferedReader(file);\n                Gson gson = new Gson();\n                // convert JSON file to Gerarchia\n                offerta = gson.fromJson(reader, Offerta.class);\n                if (autore.equals(offerta.getAutore()))\n                    offertaList.add(offerta);\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Errore apertura file Offerte\");\n        }\n        return offertaList;\n    }\n\n    public static List<Offerta> readOffertaByAutoreAndState(String autore, StatoOfferta stato) {\n        List<Offerta> offertaList = new ArrayList<>();\n        Offerta offerta;\n        try {\n            Reader reader;\n            if (JsonUtil.createListOfFile(directoryOfferte) == null) {\n                return null;\n            }\n            for (Path file : JsonUtil.createListOfFile(directoryOfferte)) {\n                reader = Files.newBufferedReader(file);\n                Gson gson = new Gson();\n                // convert JSON file to Gerarchia\n                offerta = gson.fromJson(reader, Offerta.class);\n                if (autore.equals(offerta.getAutore()) && stato.equals(offerta.getStatoCorrente()))\n                    offertaList.add(offerta);\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Errore apertura file Offerte\");\n        }\n        return offertaList;\n    }\n\n    public static List<Offerta> readOfferteApertebyCategoria(String autore, Categoria categoria) {\n        List<Offerta> offertaList = new ArrayList<>();\n        Offerta offerta;\n        try {\n            Reader reader;\n            if (JsonUtil.createListOfFile(directoryOfferte) == null) {\n                return null;\n            }\n            for (Path file : JsonUtil.createListOfFile(directoryOfferte)) {\n                reader = Files.newBufferedReader(file);\n                Gson gson = new Gson();\n                // convert JSON file to Gerarchia\n                offerta = gson.fromJson(reader, Offerta.class);\n                if (!autore.equals(offerta.getAutore())) {\n                    if (offerta.getStatoCorrente().equals(StatoOfferta.APERTA)\n                            && offerta.getCategoria().getNome().equals(categoria.getNome())\n                            && offerta.getCategoria().getPadre().equals(categoria.getPadre())) {\n                        offertaList.add(offerta);\n                    }\n                }\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Errore apertura file Offerte\");\n        }\n        return offertaList;\n    }\n\n    public static void writeBaratto(Baratto baratto) {\n        GsonBuilder builder = new GsonBuilder();\n        Gson gson = builder.create();\n        StringBuilder nomeFile = new StringBuilder();\n        nomeFile.append(directoryBaratti)\n                .append(baratto.getOffertaA().getAutore()).append(\"_\")\n                .append(baratto.getOffertaB().getAutore()).append(\"_\")\n                .append(\"_\").append(baratto.getDataOraBaratto())\n                .append(\".json\");\n        try (\n                FileWriter writer = new FileWriter(nomeFile.toString())\n        ) {\n            writer.write(gson.toJson(baratto));\n        } catch (IOException e) {\n            System.out.println(\"Errore nel salvataggio dell' offerta\");\n        }\n    }\n\n    public static List<Baratto> readBarattoByUtente(String utenteB){\n        List<Baratto> barattoList = new ArrayList<>();\n        Baratto baratto;\n        try {\n            Reader reader;\n            if (JsonUtil.createListOfFile(directoryBaratti) == null) {\n                return null;\n            }\n            for (Path file : JsonUtil.createListOfFile(directoryBaratti)) {\n                reader = Files.newBufferedReader(file);\n                Gson gson = new Gson();\n                // convert JSON file to Gerarchia\n                baratto = gson.fromJson(reader, Baratto.class);\n                if(baratto.getUtenteB().equals(utenteB) && baratto.getOffertaB().getStatoCorrente().equals(StatoOfferta.SELEZIONATA)){\n                    barattoList.add(baratto);\n                }\n            }\n        } catch (IOException ex) {\n            System.out.println(\"Errore apertura file Offerte\");\n        }\n        return barattoList;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utility/JsonUtil.java b/src/utility/JsonUtil.java
--- a/src/utility/JsonUtil.java	
+++ b/src/utility/JsonUtil.java	
@@ -263,4 +263,6 @@
         }
         return barattoList;
     }
+
+    public static
 }
